/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.storage.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import java.util.List;

/**
 * The BlockLookupList model.
 */
@JacksonXmlRootElement(localName = "BlockList")
public final class BlockLookupList {
    private static final class CommittedWrapper {
        @JacksonXmlProperty(localName = "Committed")
        private final List<String> items;

        @JsonCreator
        private CommittedWrapper(@JacksonXmlProperty(localName = "Committed") List<String> items) {
            this.items = items;
        }
    }

    /**
     * The committed property.
     */
    @JacksonXmlProperty(localName = "Committed")
    private CommittedWrapper committed;

    private static final class UncommittedWrapper {
        @JacksonXmlProperty(localName = "Uncommitted")
        private final List<String> items;

        @JsonCreator
        private UncommittedWrapper(@JacksonXmlProperty(localName = "Uncommitted") List<String> items) {
            this.items = items;
        }
    }

    /**
     * The uncommitted property.
     */
    @JacksonXmlProperty(localName = "Uncommitted")
    private UncommittedWrapper uncommitted;

    private static final class LatestWrapper {
        @JacksonXmlProperty(localName = "Latest")
        private final List<String> items;

        @JsonCreator
        private LatestWrapper(@JacksonXmlProperty(localName = "Latest") List<String> items) {
            this.items = items;
        }
    }

    /**
     * The latest property.
     */
    @JacksonXmlProperty(localName = "Latest")
    private LatestWrapper latest;

    /**
     * Get the committed value.
     *
     * @return the committed value.
     */
    public List<String> committed() {
        return this.committed.items;
    }

    /**
     * Set the committed value.
     *
     * @param committed the committed value to set.
     * @return the BlockLookupList object itself.
     */
    public BlockLookupList withCommitted(List<String> committed) {
        this.committed = new CommittedWrapper(committed);
        return this;
    }

    /**
     * Get the uncommitted value.
     *
     * @return the uncommitted value.
     */
    public List<String> uncommitted() {
        return this.uncommitted.items;
    }

    /**
     * Set the uncommitted value.
     *
     * @param uncommitted the uncommitted value to set.
     * @return the BlockLookupList object itself.
     */
    public BlockLookupList withUncommitted(List<String> uncommitted) {
        this.uncommitted = new UncommittedWrapper(uncommitted);
        return this;
    }

    /**
     * Get the latest value.
     *
     * @return the latest value.
     */
    public List<String> latest() {
        return this.latest.items;
    }

    /**
     * Set the latest value.
     *
     * @param latest the latest value to set.
     * @return the BlockLookupList object itself.
     */
    public BlockLookupList withLatest(List<String> latest) {
        this.latest = new LatestWrapper(latest);
        return this;
    }
}
